/* test.mpsl */

/* program written in mpsl
   (Minimum Profit Scripting Language) */

print("This is a test.\n");

/* hash */
days = {
	"lunes"		=> "monday",
	"martes"	=> "tuesday",
	"miercoles"	=> "wednesday",
	"jueves"	=> "thursday",
	"viernes"	=> "friday"
	};

print("English for lunes is ", days.lunes, "\n");
print("English for martes is ", days['martes'], "\n");
day="miercoles";
print("English for ", day, " is ", days[day], "\n");

/* multiple level structure */
window={};
window.ids={};
wid={ 'x' => 640, 'y' => 400 };
window.ids['main']=wid;

print("x: ", window['ids']['main']['x'], "\n");
print("x: ", window.ids.main.x, "\n");

dump(window);

content=glob("*.*");
print("Current directory: ", ajoin(", ", content), "\n");
print("Number of files: ", size(content), "\n");

foreach(a, content)
{
	print("Value for a: ", a, "\n");
}

a="hey!";
if(a eq "hey!")
{
	local a;

	a="wow!";
	print("Value for a: ", a, "\n");
}
print("Value for a: ", a, "\n");

if(a eq "hey!")
{
	print("Variable scope is fine\n");
}
else
{
	print("Something weird happened to variable 'a'\n");
}

math={};

sub math.sum(a, b) { return(a + b); }

print(math.sum(5, 4), "\n");

_sum=math.sum;
print(_sum(6, 7), "\n");

ary = [ 0, 1, 2, 3 ];
print("size: ", size(ary), "\n");
ary[100] = 100;
print("size: ", size(ary), "\n");

a = 10;
b = 20;

/* ternary operator */
c = a > b && a || b;
print("c: ", c, "\n");

c = a < b && a || b;
print("c: ", c, "\n");

c = 100;
c %= 49;
print("c: ", c, "\n");

a = sub { print("I'm working for the world go round!\n"); };
a();

sum = sub (a, b) { return(a + b); };
print("sum 5 + 3: ", sum(5, 3), "\n");
print("sum 25 + 33: ", sum(25, 33), "\n");

/* greatest common divisor (Euclid's algorithm) */
sub gcd(m, n)
{
	while (m > 0)
	{
		if(n > m)
		{
			local t = m;
			m = n;
			n = t;
		}

		m -= n;
	}

	return(n);
}

print("gcd(100, 50) == ", gcd(100, 50), "\n");
print("gcd(65536, 16384) == ", gcd(65536, 16384), "\n");
print("gcd(123456, 654321) == ", gcd(123456, 654321), "\n");

sub avg(a, b) { a += b; a /= 2; }

print("avg(100, 50) == ", avg(100, 50), "\n");
print("avg(65536, 16384) == ", avg(65536, 16384), "\n");
print("avg(123456, 654321) == ", avg(123456, 654321), "\n");

on_exit_subs = [];
apush(on_exit_subs, sub { print("Close files\n"); } );
apush(on_exit_subs, sub { print("Clean up memory\n"); } );
apush(on_exit_subs, sub { print("Other stuff\n"); } );

/* now exiting */
foreach(f, on_exit_subs) f();

math_ops = [
	sub (a, b) { print(a, " + ", b, ": ", a + b, "\n"); },
	sub (a, b) { print(a, " - ", b, ": ", a - b, "\n"); },
	sub (a, b) { print(a, " * ", b, ": ", a * b, "\n"); },
	sub (a, b) { print(a, " / ", b, ": ", a / b, "\n"); }
];

foreach(f, math_ops) f(10, 20);

print("cmp('sunday','monday'): ", cmp('sunday','monday'), "\n");
print("cmp('friday','monday'): ", cmp('friday','monday'), "\n");
print("cmp('sunday','sunday'): ", cmp('sunday','sunday'), "\n");

l=hkeys(days);
print("\nUnsorted:\n", ajoin("\n", l), "\n");

l=asort(hkeys(days));
print("\nSorted:\n", ajoin("\n", l),"\n");

l=asort(hkeys(days), sub (a, b) { cmp(a, b); });
print("\nSorted, with explicit callback function:\n", ajoin("\n", l),"\n");

l=asort(hkeys(days), sub (a, b) { cmp(b, a); });
print("\nReverse-sorted:\n", ajoin("\n", l),"\n");
