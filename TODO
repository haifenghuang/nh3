TODO
====

fdm_dump() should store its output in a _v or _a.

New functions to: split a string into an array (using separators),
an array version of splice (fdm_asplice()).

filp should be a different project. It's config.sh should decide to use
./fdm or ../fdm in -I and -L.

Examples
========

Filp startup
------------

	fdm_v _dict;
	fdm_v _stack;

	_dict=FILP_H();
	_stack=FILP_A(0);
	filp_hset(_dict, FILP_LS("DICT"), _dict);
	filp_hset(_dict, FILP_LS("STACK"), _stack);

Filp main exec loop
-------------------

	fdm_ref(v);

	if(FDM_TYPE(v) == FILP_BINCODE)
		ret=(v->data)();
	else
	if(FDM_TYPE(v) != FILP_CODE)
		ret=FILP_SYNTAX_ERROR;
	else
	for(n=0;ret == FILP_OK && n < v->size;n++)
	{
		c=fdm_aget(v, n);

		if(FDM_TYPE(c) == FILP_BC_EXEC)
			ret=filp_exec(fdm_aget(c, 0));
		else
		if(FDM_TYPE(c) == FILP_BC_SYMV)
			filp_push(fdm_hget(_dict, fdm_aget(c, 0)));
		else
		filp_push(c);

		fdm_sweep(0);
	}

	fdm_unref(v);

The FDM Machine Language
========================

; mp_move_bol(H cdata)

	"txt"		; push literal
	HGET		; gets cdata.txt
	"x"		; push literal
	0		; push literal
	HSET		; sets cdata.txt.x = 0


; mp_move_eol(H cdata)

	"txt"
	HGET		; cdata.txt
	DUP		; cdata.txt cdata.txt
	"lines"
	HGET		; cdata.txt cdata.txt.lines
	SIZE		; cdata.txt cdata.txt.lines.size
	"x"
	SWAP		; cdata.txt "x" cdata.txt.lines.size
	HSET		; cdata.txt.x = size

; mp_move_bof(H cdata)
	"txt"
	HGET
	DUP
	"x"
	0
	HSET		; cdata.txt.x = 0
	"y"
	0
	HSET		; cdata.txt.y = 0

; mp_move_eof(H cdata)
	"txt"
	HGET		; cdata.txt
	DUP
	"lines"
	HGET		; cdata.txt cdata.txt.lines
	SIZE		; cdata.txt cdata.txt.lines.size
	DEC		; cdata.txt size-1
	"y"
	SWAP
	HSET		; cdata.txt.y = size-1

; mp_move_left(H cdata)
	"txt"
	HGET
	DUP		; txt txt
	"x"
	HGET
	DUP		; txt x x
	0
	>
	; x > 0
	{
		DEC	; txt x-1
		"x"	; txt x-1 "x"
		SWAP	; txt "x" x-1
		HSET
	}
	; else
	{
		POP
		"y"
		HGET
		DUP	; txt y y
		0
		>
		; y > 0
		{
			DEC
			"y"
			SWAP
			HSET
			$mp_move_eol
		}
		IF
	}
	IFELSE
